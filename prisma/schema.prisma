// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Profile {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  address String
  phone String
  user User @relation(fields: [userId], references: [id])
  userId Int @unique // relation scalar field (used in the @relation attribute above)
}

model User {
  id Int @id @default(autoincrement())
  username String
  password String
  profile Profile? // relation scalar field (used in the @relation attribute above)

  Post Post[]
}
model Post{
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  published Boolean @default(false)

  categories Category[]
  CategoriesOnPosts CategoriesOnPosts[]
}

model Category{
  id Int @id @default(autoincrement())
  name String
  posts Post[]
  CategoriesOnPosts CategoriesOnPosts[]
}

model CategoriesOnPosts{
  post Post @relation(fields: [postId], references: [id])
  postId Int  // relation scalar field (used in the @relation attribute above)
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the @relation attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  @@id([postId, categoryId])
}

